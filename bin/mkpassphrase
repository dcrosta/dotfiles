#!/usr/bin/env python3

import argparse
import random
import re


def main():
    parser = argparse.ArgumentParser(description="Generates a passphrase with the XKCD method")
    parser.add_argument("-l", "--length", type=int, default=20, metavar="MIN_LENGTH", help="Generate passphrases with at least this many characters [default: 30]")
    parser.add_argument("-s", "--separator", type=str, default="-", help="Separate words with this string [default: '-']")
    parser.add_argument("-n", "--min-word-length", type=int, default=3, help="Use words no shorter than this [default: 3]")
    parser.add_argument("-m", "--max-word-length", type=int, default=7, help="Use words no longer than this [default: 7]")
    parser.add_argument("word_file", type=str, metavar="WORD_FILE", help="Use this file for words")

    args = parser.parse_args()

    randomizer = random.SystemRandom()
    words = load_words(args.word_file, args.max_word_length)
    print("%d words" % len(words))

    while True:
        for _ in range(20):
            phrase = []
            while length_of(phrase, args.separator) < args.length:
                phrase.append(randomizer.choice(words))
            print(args.separator.join(phrase))

        more = input("more? [Y/n] ")
        if more.strip().lower() == "n":
            break


def load_words(word_file, max_length):
    words = set()
    for line in open(word_file):
        for match in re.finditer(r"(\w+)", line):
            word = match.group(0)
            # \w matches underscore and 0-9, strip those
            word = re.sub(r"[_0-9]", "", word)
            if len(word) > 2 and len(word) <= max_length:
                words.add(word.lower())
    return list(words)


def length_of(phrase, separator):
    return sum(len(word) for word in phrase) + len(separator) * max(0, len(phrase) - 1)


if __name__ == "__main__":
    import sys
    sys.exit(main())
